/*
 * This file belongs to Hoist, an application development toolkit
 * developed by Extremely Heavy Industries (www.xh.io | info@xh.io)
 *
 * Copyright Â© 2018 Extremely Heavy Industries Inc.
 */

import React, {Component} from 'react';
import {PropTypes as PT} from 'prop-types';
import {elemFactory, HoistComponent} from '@xh/hoist/core';
import {Ref} from '@xh/hoist/utils/react';
import {computed} from '@xh/hoist/mobx';
import {div, span, pre} from '@xh/hoist/cmp/layout';
import {throwIf} from '@xh/hoist/utils/js';
import {isArray} from 'lodash';

import './ReadOnlyField.scss';
import {HoistInput} from '@xh/hoist/cmp/form';
import {NumberInput, TextArea, JsonInput} from './';

/**
 * A read only wrapper around a HoistInput Component.
 *
 * Should receive a single HoistInput as a child element. Renders the HoistInput's
 * readOnlyValue using standardised styling. Alternatively, a custom renderer
 * function can be provided.
 *
 * Can be automatically generated by FormField by passing readOnly: true to FormField.
 */
@HoistComponent
export class ReadOnlyField extends Component {

    static propTypes = {
        /** Alignment of text in field */
        textAlign: PT.oneOf(['left', 'right']),
        /** Preformatted text in field */
        whiteSpace: PT.oneOf(['normal', 'pre', 'pre-wrap', 'pre-line', 'nowrap']),
        /** Renderer function in the format (renderValue) => string */
        renderer: PT.func
    };

    inputRef = new Ref();

    baseClassName = 'xh-readonly-field';

    @computed
    get readOnlyValue() {
        if (!this.inputRef.value) return null;

        const {renderer} = this.props,
            {renderValue, readOnlyValue} = this.inputRef.value;

        return renderer ? renderer(renderValue) : readOnlyValue;
    }

    render() {
        const {props, readOnlyValue, childIs} = this,
            inputItem = this.prepareChild(),
            textAlign = props.textAlign || (childIs(NumberInput) ? 'right' : 'left'),
            whiteSpace = props.whiteSpace || (childIs(TextArea) ? 'pre-line' : 'normal'),
            renderedValue = childIs(JsonInput) ? pre(readOnlyValue) : span(readOnlyValue);

        return div({
            className: this.getClassName(),
            style: {textAlign, whiteSpace, ...props.style},
            items: [
                // We render the hidden HoistInput in order to obtain a ref to it
                span({item: inputItem, style: {display: 'none'}}),
                renderedValue
            ]
        });
    }

    //--------------------
    // Implementation
    //--------------------
    prepareChild() {
        const item = this.props.children;
        throwIf(!item || isArray(item) || !(item.type.prototype instanceof HoistInput), 'ReadOnlyField child must be a single component that extends HoistInput.');
        return React.cloneElement(item, {ref: this.inputRef.ref});
    }

    childIs = (prototype) => {
        return this.inputRef.value instanceof prototype;
    };

}

export const readOnlyField = elemFactory(ReadOnlyField);